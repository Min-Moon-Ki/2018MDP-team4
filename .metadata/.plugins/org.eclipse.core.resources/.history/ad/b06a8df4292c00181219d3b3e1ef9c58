package d20180312;

import java.awt.Point;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Enumeration;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.UnsupportedCommOperationException;

public class Reciver extends Thread {

	private static final int datarate = 9600;
	private static final int[] uuid = {0,0,0};
	private static final double ca = 2, cb = 2; 
	
	private InputStream inpstr;
	private PrintWriter outpstr;
	
	private SerialPort sp;
	private String commName = "COM9";
	private CommPort cmp;
	
	private StringBuilder sb;
	private boolean flag = false;
	
	public static void main(String[] args) {
		Reciver.pointing(Math.pow(1+Math.sqrt(3), 2), 2, 4);
	}
	
	public Reciver() {
		sb = new StringBuilder();
		
		@SuppressWarnings("rawtypes")
		Enumeration e = CommPortIdentifier.getPortIdentifiers();
				
		while(e.hasMoreElements()) {
			CommPortIdentifier comPort = (CommPortIdentifier) e.nextElement();
			if(comPort.getName().equals(commName)) {
				if(!comPort.isCurrentlyOwned()) {
					try {
						cmp = comPort.open(this.getClass().getName(),2000);
						if(cmp instanceof SerialPort) {
							sp = (SerialPort) cmp;
							sp.setSerialPortParams(datarate, 
									SerialPort.DATABITS_8, 
									SerialPort.STOPBITS_1,
									SerialPort.PARITY_NONE);
							inpstr = sp.getInputStream();
							outpstr = new PrintWriter(new OutputStreamWriter(sp.getOutputStream()));
							System.out.println("Complete");
						}
					} catch (PortInUseException e1) {
						e1.printStackTrace();
					} catch (UnsupportedCommOperationException e1) {
						e1.printStackTrace();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}	//if notOwned
				break;
			}	//if name == commName
		}	//while hasMoreElements
	}	//constructor
	
	private void processing(String msg) {
		boolean flag = false;
		int temp,rid, tx = 0, rx = 0;
		System.out.println(msg);
		String[] str = msg.split(",");
		for(String st : str) {
			temp = 0;
			System.out.println("st : " + st);
			if(st.startsWith("uuid=")) {
				temp = toInt(st);
				for(int id : uuid) if(id == temp) flag = true;
				if(!flag) break;
				rid = temp;
			}
			if(st.startsWith("tx=")) {
				temp = toInt(st);
				tx = temp;
			}
			if(st.startsWith("rx=")) {
				temp = toInt(st);
				rx = temp;
			}
			System.out.println(temp);
		}
		
	}
	
	private static void pointing(double cd, double ad, double bd) {
		double a = Math.sqrt(ad), b = Math.sqrt(cd), c = Math.sqrt(bd);
		//double cosAC = (cd + ca - ad) / (2*a*b);
		//double cosACD = (cd - ca - ad) / (2*b*ca);
		System.out.println((Math.acos(0)/Math.PI)*180);
	}
	
	private int toInt(String msg){
		boolean minus = false;
		char[] m = msg.substring(msg.indexOf("=")+1).toCharArray();
		int length = m.length;
		int result = 0;
		if(m[0] == '-') {
			minus = true;
			for(int i=0;i<m.length-1;i++) {
				m[i]= m[i+1];
			}
			m[m.length-1] = 'N';
			length -= 1;
		}
		for(int i=0;i<length;i++) {
			if(m[i] >= '0' && m[i] <= '9') result += (m[i]-'0')*Math.pow(10, length-1-i);
		}
		return (minus)?(-result):(result);
	}
	
	public synchronized void send(String msg) throws IOException {
		outpstr.write(msg);
		System.out.println("sending complete");
	}
	
	public void run(){
		try {
			while(true)
			{
				int temp = inpstr.read();
				if(temp != -1) {
					System.out.println((char)temp);
					if(temp == 'E') {
						flag = false;
						processing(sb.toString());
						sb.delete(0, sb.length());
					}
					if(flag)sb.append((char)temp);
					if(temp == 'S') flag = true;
				}
			}
		} catch(IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(inpstr != null) inpstr.close();
				if(outpstr != null) outpstr.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
